type TestData {
    text: String!
    views: Int!
}

type Message {
    text: String!
    createdAt: String!
    updatedAt: String
    creator: User!
}

type Section {
    title: String!
    cratedAt: String!
    updatedAt: String
    creator: User!
    messages: [Message]
}

type Topic {
    caption: String!
    createdAt: String!
    updatedAt: String
    content: String!
    tags: [String!]
    creator: User!
    sections: [Section!]
}

type User {
    _id: ID!
    name: String!
    email: String!
    password: String
    status: String
}

type TopicID {
    _id: ID!,
    caption: String!
}

input TopicInputData {
    caption: String!
    content: String!
}

input UserInputData {
   email: String!
   name: String!
   password: String!
}

type AuthData {
    token: String!
    userId: String!
}

type RootMutation {
    createUser(userInput: UserInputData): User!

    createTopic(topicInput: TopicInputData): TopicID!
}

type RootQuery {
    hello: TestData!

    getTopics(author: String!): [Topic!]

    login(email: String!, password: String!): AuthData!
}

schema {
    query: RootQuery
    mutation: RootMutation
}
